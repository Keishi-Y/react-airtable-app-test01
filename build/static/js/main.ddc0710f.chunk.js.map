{"version":3,"sources":["components/Course.js","components/CourseList.js","components/Tags.js","components/CourseForm.js","App.js","serviceWorker.js","index.js"],"names":["Course","course","refreshCourses","markCoursePurchased","a","fetch","method","body","JSON","stringify","purchased","console","error","deleteCourse","id","className","href","link","name","tags","map","tag","index","key","onClick","CourseList","courses","filter","Tags","tagsUpdated","useState","selectedTags","setSelectedTags","useEffect","tagChange","e","value","target","alreadySelected","includes","checked","prevTag","choice","type","onChange","CourseForm","courseAdded","setName","setLink","setTags","count","setCount","submitCourse","preventDefault","onSubmit","htmlFor","App","setCourses","loadCourses","res","json","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ddc0710f.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Course({ course, refreshCourses }) {\n  const markCoursePurchased = async () => {\n    try {\n      await fetch(\"/api/courses\", {\n        method: \"PUT\",\n        body: JSON.stringify({ ...course, purchased: true }),\n      });\n      refreshCourses();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const deleteCourse = async () => {\n    try {\n      await fetch(\"/api/courses\", {\n        method: \"DELETE\",\n        body: JSON.stringify({ id: course.id }),\n      });\n      refreshCourses();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  return (\n    <div className=\"list-group-item\">\n      <a href={course.link}>\n        <h4 className=\"list-group-item-heading\">{course.name}</h4>\n      </a>\n      <p>\n        Tags:{\" \"}\n        {course.tags &&\n          course.tags.map((tag, index) => (\n            <span className=\"badge badge-primary mr-2\" key={index}>\n              {tag}\n            </span>\n          ))}\n      </p>\n      {!course.purchased && (\n        <button\n          className=\"btn btn-sm btn-primary\"\n          onClick={markCoursePurchased}\n        >\n          Purchased\n        </button>\n      )}\n      <button className=\"btn btn-sm btn-danger ml-2\" onClick={deleteCourse}>\n        Delete\n      </button>\n    </div>\n  );\n}\n","import React from 'react';\nimport Course from './Course';\n\nexport default function CourseList({ courses, refreshCourses }) {\n    return (\n        <div>\n            <h2 className=\"mt-5 mb-3\">Backlog</h2>\n            <div className=\"list-group\">\n                {courses\n                    .filter((course) => !course.purchased)\n                    .map((course) => (\n                        <Course\n                            course={course}\n                            key={course.id}\n                            refreshCourses={refreshCourses}\n                        />\n                    ))}\n            </div>\n            <h2 className=\"mt-5 mb-3\">Already Purchased</h2>\n            {courses\n                .filter((course) => course.purchased)\n                .map((course) => (\n                    <Course\n                        course={course}\n                        key={course.id}\n                        refreshCourses={refreshCourses}\n                    />\n                ))}\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\n\nexport default function Tags({ tagsUpdated, key }) {\n    const tagChoices = ['node', 'javascript', 'react', 'jamstack'];\n    const [selectedTags, setSelectedTags] = useState([]);\n\n    useEffect(() => {\n        setSelectedTags([]);\n    }, [key]);\n\n    const tagChange = (e) => {\n        const value = e.target.value;\n        const alreadySelected = selectedTags.includes(value);\n        if (e.target.checked && !alreadySelected) {\n            setSelectedTags([...selectedTags, value]);\n        } else if (!e.target.checked && alreadySelected) {\n            setSelectedTags(\n                selectedTags.filter((prevTag) => prevTag !== value)\n            );\n        }\n    };\n\n    useEffect(() => {\n        tagsUpdated(selectedTags);\n    }, [selectedTags, tagsUpdated]);\n\n    return (\n        <>\n            {tagChoices.map((choice, index) => (\n                <label className=\"checkbox-inline mr-3\" key={index}>\n                    <input\n                        type=\"checkbox\"\n                        value={choice}\n                        onChange={tagChange}\n                    />\n                    {' ' + choice}\n                </label>\n            ))}\n        </>\n    );\n}\n","import React, { useState } from \"react\";\nimport Tags from \"./Tags\";\n\nexport default function CourseForm({ courseAdded }) {\n  const [name, setName] = useState(\"\");\n  const [link, setLink] = useState(\"\");\n  const [tags, setTags] = useState([]);\n  const [count, setCount] = useState(0);\n\n  const resetForm = () => {\n    setName(\"\");\n    setLink(\"\");\n    setCount(count + 1);\n  };\n\n  const submitCourse = async (e) => {\n    e.preventDefault();\n    try {\n      await fetch(\"/api/courses\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          name,\n          link,\n          tags,\n        }),\n      });\n      resetForm();\n      courseAdded();\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">Add a New Course</div>\n      <div className=\"card-body\">\n        <form className=\"\" onSubmit={submitCourse}>\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Name</label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              className=\"form-control\"\n              onChange={(e) => setName(e.target.value)}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"link\">Link</label>\n            <input\n              type=\"text\"\n              name=\"link\"\n              value={link}\n              className=\"form-control\"\n              onChange={(e) => setLink(e.target.value)}\n            />\n          </div>\n          <div className=\"form-group\">\n            <p>Tags</p>\n            <Tags tagsUpdated={setTags} key={count} />\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport CourseList from \"./components/CourseList\";\nimport CourseForm from \"./components/CourseForm\";\n\nfunction App() {\n  const [courses, setCourses] = useState([]);\n\n  const loadCourses = async () => {\n    //TODO:load the courses\n    try {\n      const res = await fetch(\"/api/courses\");\n      const courses = await res.json();\n      setCourses(courses);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    loadCourses();\n  }, []);\n  return (\n    <div className=\"container mt-5 mb-5\">\n      <h1 className=\"mb-5 text-center\">Course Tracker</h1>\n      <CourseForm courseAdded={loadCourses} />\n      <CourseList courses={courses} refreshCourses={loadCourses} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}